JAVA基础：
    int类型与Integer类型的区别：
        int 是 Java 中的基本数据类型，而 Integer 是对应的包装类，属于引用数据类型。以下是它们之间的主要区别：
        1.数据类型：
        int 是基本数据类型，直接存储整数值。
        Integer 是 int 的包装类，它是一个对象，可以包装（wrap）一个基本数据类型 int 成为一个对象。
        2.空值表示：
        int 是基本数据类型，不能为 null。如果不初始化，它会有一个默认值（通常是0）。
        Integer 是一个对象，可以为 null。
        3.JAVA5之后的拆箱装箱过程：
        // 装箱
        int primitiveInt = 42;
        Integer boxedInteger = Integer.valueOf(primitiveInt);
        // 拆箱
        int unboxedInt = boxedInteger.intValue();

图：
    bfs：
    PowerPointOffer：
        GraphBipartite
        matrix

数论：
    1.最小质因数
    例题对应/test/MinimumPrimeFactor.class：
    当我们谈论一个数的最小质因子时，
    我们是指能够整除该数并且是质数的最小正整数。
    一个质数是指只能被1和自身整除的正整数。
    因此，最小质因子就是能够整除给定数并且是质数的最小整数。
    1不是质数，所以要对i<2进行处理

    例如：
    考虑数 12。它可以被 2 整除，因为 12 ÷ 2 = 6。在这里，2 是 12 的最小质因子，因为它是一个质数（只能被1和2整除），而没有更小的整数可以整除12。
    再考虑数 7。7 是一个质数，因为除了1和7之外，没有其他正整数可以整除7。因此，7 的最小质因子是它本身，即7。

    2.求最小公倍数以及最大公约数
    这道题用到了求最大公约数的算法
    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }

    long n = scan.nextLong();
    long a = (n + 1) * n / 2;
    long b = 1;
    for(long i = 1;i <= n;i++){
        b = (b * i) % a;  //450015000 //最小公倍数可以预处理？？？
        //b = (b * i);  //5759323001
    }
    求两个数的最大公约数可以进行%的预处理

    给出以下求出最小公倍数的算法
    public static int lcm(int c, int d) {
        // 使用最大公约数的关系求最小公倍数
        return Math.abs(c * d) / gcd(c, d);

    3.求闰年
    public static boolean judgeYear(int year) {
    		if(year % 400 ==0 ||(year % 100 != 0 && year % 4 ==0 ))
    				return true;
    			else
    				return false;
    }
    差分法：

    4.求字符串包含字符的int类型的和
    public static int getSum(String s) {
        int sum=0;
        for(int i=0;i<s.length();i++) {
            if(s.charAt(i)>='a'&&s.charAt(i)<='f') //如果是a-f
                sum+=s.charAt(i)-'a'+10;
            else //如果是数字
                sum+=s.charAt(i)-'0';
        }
        return sum;
    }










检查：
    1.检查书写错误
    2.col和row容易混淆
    3.有时候要用long而不是int
    4.题目指出要从1开始就不要从0开始，和案例的坐标index（题目会使用下标进行判断）对不上就会出错 例子DFS_gold.test
    5.dp数组错误检测：
        (1)确定状态转移方程，在StairProblem问题中就是因为台阶数错认为6（原本是5）导致整个状态转移方程出错，没有计算0台阶也算一个台阶，下标应该是0 ~ 5
        (2)如果台阶数为N,实际上设计的dp数组长度为 N + 1;
输入输出：
    打印LinkedList时
    System.out.println(Arrays.toString(list.toArray()));

    打印int[][]时
    int[][] graph1 = new int[][]{{1, 2}, {3}, {3}, {}};
    System.out.println(Arrays.deepToString(graph1));
    输出[[1, 2], [3], [3], []

    初始化List<List<>>方式：
    List<List<String>> queries = Arrays.asList(
                    Arrays.asList("a", "c"),
                    Arrays.asList("b", "a"),
                    Arrays.asList("a", "e"),
                    Arrays.asList("a", "a"),
                    Arrays.asList("e", "e")
            );


    order.stream().mapToInt(i->i).toArray()
    * 将 List<Integer> 类型的链表 order 转换为一个 int 数组。
    * 在这个特定的场景下，由于 order 中存储的是整数类型的课程顺序，
    * 所以这种转换是很方便的。最终返回的是一个基本类型 int 数组，而不是 Integer 类型的数组。


岛屿问题：
    1.一般采用dfs算法，一般都是两个for循环开始遍历
    2.考虑边界问题，如1808即不考察边界问题，而是直接从1-N-1范围查找
    3.dfs遍历：定义二维数组，根据判断条件不断dfs
        更新方式：
        int[][] temp = {{1,0},{-1,0},{0,1},{0,-1}};
        int nx = x + temp[i][0];
        int ny = y + temp[0][i];
    4.考虑是否访问过，一般维护一个visit数组判断是否访问过，加入到判断条件之中
    5.边界判断条件需要添加在岛屿问题之前，
        如下：
            if(New_I >= 0 && New_I < n && New_J >= 0 && New_J < m && nums[New_I][New_J] != 0 && visit[New_I][New_J] == 0)

完全二叉树的深度以及层级权值：
    深度以及层级权值：
        例题A1906:
        这道题有一个新的思考点，就是在蓝桥杯中大部分程序题都是使用输入方式存储数据
        这道题就巧妙的采用的特殊的方式找到左右节点：
        左节点：root * 2 + 1 或者 (root << 2) + 1
        右节点：root * 2 + 2 或者 (root << 2) + 1
        <<相当于乘以2
        在这道题中使用的queue方式存储每一层的节点，size用来控制for循环的范围，每一层中对下一个节点进行操作

暴力解题：
    寻找数组中的最大值快捷方法；
        int max = Arrays.stream(arr).max().orElse(-1); // 如果数组为空，则返回-1
        System.out.println("最大值: " + max);
    寻找数组元素（避免暴力超时）：
    用二分法解决：
        二分法：
        public static int dichotomy(int[] arr,int left,int right,int target){
            int middle = left + (right - left) / 2;
            while(left <= right){
                if(arr[middle] == target){
                    return middle;
                }else if(arr[middle] > target){
                    right = middle - 1;
                }else{
                    left = middle + 1;
                }
            }
        }
        前缀和（解决子数组求和问题）
            public static int[] calculatePreFixSum(int[] arr){
                    int n = arr.length;
                    int[] preSum = new int[n];
                    preSum[0] = arr[0];
                    for(int i = 1; i < n;i++){
                        preSum[i] = preSum[i-1] + arr[i];
                    }
                    return preSum;
            }
            public static int getRangeSum(int[] preSum,int left,int right){
                if(left == 0){
                    return preSum[right];
                }else{
                    return preSum[right] - preSum[left - 1];
                }
            }
        回溯法：
            dfs求组合
            public static List<List<Integer>> subSet(int[] arr){
                    List<List<Integer>> res = new LinkedList<>();
                    helper(arr,0,new LinkedList<>(),res);
                    return res;
            }
            private static void helper(int[] arr, int index, LinkedList<Integer> path, List<List<Integer>> res) {
                //剪枝 如果有目标和
                if(target < sum) return;


                if(index == arr.length){
                    res.add(new LinkedList<>(path));
                    //res.add(path);
                }else if(index < arr.length){
                    helper(arr,index,new LinkedList<>(),res);
                    path.add(arr[index]);
                    helper(arr,index,new LinkedList<>(),res);
                    path.removeLast();
                }
            }
            dfs(candidates, begin, len, target, path, res);//[[2,2,3],[2,3,2],[3,2,2],[7]] 完全不会去重
            dfs(candidates, i, len, target, path, res);//[[2,2,3],[7]]  有重复的组合但是会去重
            dfs(candidates, i+1, len, target, path, res);[[7]] 完全没有重复的组合
            递归时选择 1.遍历时i=begin 下次还是会从begin开始
                     2.遍历时i=begin 下次从i开始
                     3.遍历时i=begin 下次从i+1开始



        数组在每一次操作中数值都会减少：
            避免暴力更新（内置循环更新数组）：选择实时更新（如更新幸福值：LC3075）
                for(int i = n - 1;i >= n - k && happiness[i] > n - 1 - i;i--){
                            //#### 该循环从后往前遍历，更新的截至由k决定，n - k 为截至下标
                            //#### happiness[i] > n - 1 - i == happiness[i] - （n - 1 - i） > 0；这句话的意思是每一次遍历值都会减少1，此时拿到的值就是-i次（遍历次数）
                            happiness[i] -= n - 1 - i; //#### 最开始的遍历都是从happiness[i] - 0开始
                            sum += happiness[i];
                }

动态规划 0-1背包总结
    首先确定背包重量 w ,物品数量n,其次是每一件物品的价值和重量，一般情况下用数组value[] 和 weight[]
    初始化dp[],value[],weight[]数组, 一般情况下 初始化为
    int[] dp = new int[w + 1];
    int[] value = new int[n + 1];
    int[] weight = new int[n + 1];
    每一个index = 0的位置初始化都为0
    那么循环处理代码如下：
        for(int i = 1;i <= n;i++){
            for(int j = w;j > weight[i];j--){
                dp[j] = Math.max(dp[j],dp[j - weight[i]] + value[i]);
            }
        }
        最后输出dp[j]即可，所有的遍历都是从index = 1开始


字符串：
    KMP算法；
        求next数组：
        固定求法：
        public void getNext(String s,int[] next){
            int j = 0;
            int len = s.length;
            for(int i = 1; i < length;i++){
                while(j > 0 && s.charAt(i) != s.charAt(j)){
                    j = next[j - 1];
                }
                if(s.charAt(i) == s.charAt(j)){
                    j++;
                }
                next[i] = j;
            }
        }

树：
    递归：
        前序遍历：
            public static void preorder(TreeNode root,ArrayList<Integer> res){
                //TreeNode root为根结点 res 为结果列表
                if(root == null){
                    return;
                }
                res.add(root.val);
                preorder(root.left,res);
                preorder(root.right,res);
            }
        中序遍历：
            public static void preorder(TreeNode root,ArrayList<Integer> res){
                if(root == null){
                    return;
                }
                preorder(root.left,res);
                res.add(root.val);
                preorder(root.right,res);
            }
        后序遍历：
            public static void preorder(TreeNode root,ArrayList<Integer> res){
                if(root == null){
                    return;
                }
                preorder(root.left,res);
                preorder(root.right,res);
                res.add(root.val);
            }
        层序遍历（采用BFS）
            public List<List<Integer>> levelOrder(TreeNode root){
                List<List<Integer>> res = new ArrayList<List<Integer>>();
                if(root == null){
                    return res;
                }
                Queue<TreeNode> queue = new LinkedList<>();
                queue.offer(root)
                while(!queue.isEmpty()){
                    TreeNode node = queue.remove();
                    int size = queue.size();
                    List<Integer> temp = new ArrayList<>();
                    for(int i = 0;i < size;++i){
                        if(node.left != null){
                            queue.offer(node.left);
                        }
                        if(node.right != null){
                            queue.offer(node.right);
                        }
                    }
                    temp.add(node.val);
                }
                return res;
            }
        翻转二叉树：
            public TreeNode invertTree(TreeNode root){
                if(root == null){
                    return null;
                }
                TreeNode left = invertTree(root.left);
                TreeNode right = invertTree(root.right);
                root.left = right;
                root.right = left;
                return root
            }
        求深度：
            最小深度：
                public int minDepth(TreeNode root) {
                    if(root == null){
                        return 0;
                    }
                    if(root.left == null && root.right == null){
                        return 1;
                    }
                    int val_1 = minDepth(root.left);
                    int val_2 = minDepth(root.right);
                    if(root.left == null || root.left == null) return val_1 + val_2 + 1;
                    return Math.min(val_1,val_2) + 1;
                }
            最大深度：
                public int maxDepth(TreeNode){
                    if(root == null){
                        return 0;
                    }
                    return Math.max(maxDepth(root.left),maxDepth(root.right)) + 1;
                }
            平衡二叉树：左右节点高度相差小于1
                 public boolean isBalanced(TreeNode root) {
                        if(root == null) return true;
                        int val_1 = getDepth(root.left);
                        int val_2 = getDepth(root.right);
                        return Math.abs(val_1 - val_2) <= 1 && isBalanced(root.left) && isBalanced(root.right);
                }
                public static int getDepth(TreeNode root){
                    if(root == null){
                        return 0;
                    }
                    return Math.max(getDepth(root.left),getDepth(root.right)) + 1;
                }
哈希表：
    1.HashMap
    2.数组++--两字符串对比个数
